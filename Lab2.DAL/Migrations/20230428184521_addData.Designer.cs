// <auto-generated />
using Lab2.DAL.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab2.DAL.Migrations
{
    [DbContext(typeof(DevContext))]
    [Migration("20230428184521_addData")]
    partial class addData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeveloperTicket", b =>
                {
                    b.Property<int>("DevelopersId")
                        .HasColumnType("int");

                    b.Property<int>("TicketsId")
                        .HasColumnType("int");

                    b.HasKey("DevelopersId", "TicketsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("DeveloperTicket");
                });

            modelBuilder.Entity("Lab2.DAL.Data.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Accounting"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HR"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Operations"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Legal"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sales"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Customer Service"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Engineering"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Research and Development"
                        });
                });

            modelBuilder.Entity("Lab2.DAL.Data.Models.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Developers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jane Doe"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bob Smith"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Alice Johnson"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mike Brown"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sarah Lee"
                        },
                        new
                        {
                            Id = 7,
                            Name = "David Kim"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Emily Chen"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Alex Rodriguez"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Jessica Lee"
                        });
                });

            modelBuilder.Entity("Lab2.DAL.Data.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("departmentId");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The printer in the accounting department is not printing anything.",
                            Title = "Printer not working",
                            departmentId = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "I'm unable to access my email account. It keeps saying my password is incorrect.",
                            Title = "Can't access email",
                            departmentId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "The internet connection in the marketing department is very slow and keeps dropping.",
                            Title = "Networking issue",
                            departmentId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "The new software we installed in the HR department is not functioning properly.",
                            Title = "Software not working",
                            departmentId = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "I'm unable to connect to the company VPN. It keeps giving me an error.",
                            Title = "Can't connect to VPN",
                            departmentId = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "My laptop is very old and slow. I need a new one to do my work effectively.",
                            Title = "Need new laptop",
                            departmentId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "The printer in the sales department is jammed and needs to be fixed.",
                            Title = "Printer jam",
                            departmentId = 2
                        },
                        new
                        {
                            Id = 8,
                            Description = "The company website is not loading. I keep getting a 404 error.",
                            Title = "Website down",
                            departmentId = 3
                        },
                        new
                        {
                            Id = 9,
                            Description = "I'm running out of storage space on my computer. Can I get an external hard drive?",
                            Title = "Need more storage space",
                            departmentId = 4
                        },
                        new
                        {
                            Id = 10,
                            Description = "I'm trying to print a document in color, but it's only coming out in black and white.",
                            Title = "Can't print in color",
                            departmentId = 2
                        });
                });

            modelBuilder.Entity("DeveloperTicket", b =>
                {
                    b.HasOne("Lab2.DAL.Data.Models.Developer", null)
                        .WithMany()
                        .HasForeignKey("DevelopersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab2.DAL.Data.Models.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lab2.DAL.Data.Models.Ticket", b =>
                {
                    b.HasOne("Lab2.DAL.Data.Models.Department", "department")
                        .WithMany("Tickets")
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("Lab2.DAL.Data.Models.Department", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
